{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `https://localhost:7115/`;\n  }\n  // deleteStudent(student: Student | undefined): Observable<boolean>{\n  //    return this.http.delete<boolean>(`/api/Students/${student}`);\n  //  };\n  // st:Student[]|undefined;\n  // putStudents(student: Student | undefined): Observable<boolean>{\n  //    this.getStudents().subscribe(s=>this.st=s,err=>console.log(\"err\"));\n  //    let index = this.st?this.st?.findIndex(s => student?.id == s.id) : -1;\n  //    if (index?index > -1:-1) {\n  //       this.st?.splice(index?index:-1);\n  //       return this.http.put<boolean>(`/api/Student/${index}`,student);\n  //    }   \n  //    else{\n  //       return this.addStudents(student);\n  //    }\n  // };\n  addUser(user) {\n    return this.http.post(\"/api/Student\", student);\n  }\n  getUsers() {\n    return this.http.get(this.apiUrl + \"api/User\");\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac\n  });\n}","map":{"version":3,"names":["UserService","constructor","http","apiUrl","addUser","user","post","student","getUsers","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["E:\\מיכל גבאי\\תכנות\\אנגולר\\firstProject\\src\\app\\modules\\users\\user.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/internal/Observable\";\r\nimport {HttpClient}from '@angular/common/http';\r\nimport { User } from \"./user.model\";\r\n@Injectable()\r\nexport class UserService {\r\n    apiUrl:string=`https://localhost:7115/`;\r\n   constructor(private http:HttpClient){\r\n\r\n   }\r\n \r\n   // deleteStudent(student: Student | undefined): Observable<boolean>{\r\n   //    return this.http.delete<boolean>(`/api/Students/${student}`);\r\n   //  };\r\n   // st:Student[]|undefined;\r\n   // putStudents(student: Student | undefined): Observable<boolean>{\r\n   //    this.getStudents().subscribe(s=>this.st=s,err=>console.log(\"err\"));\r\n   //    let index = this.st?this.st?.findIndex(s => student?.id == s.id) : -1;\r\n   //    if (index?index > -1:-1) {\r\n   //       this.st?.splice(index?index:-1);\r\n   //       return this.http.put<boolean>(`/api/Student/${index}`,student);\r\n   //    }   \r\n   //    else{\r\n   //       return this.addStudents(student);\r\n   //    }\r\n   // };\r\n   addUser(user: Student | undefined): Observable<boolean>{\r\n     return this.http.post<boolean>(\"/api/Student\",student);\r\n   };\r\n   getUsers(): Observable<User[]>{\r\n      return this.http.get<User[]>(this.apiUrl+\"api/User\");\r\n    };\r\n   //  getStudentsActive(active:boolean): Observable<Student[]>{\r\n   //    return this.http.get<Student[]>(`/api/Student/${active}`);\r\n   //  };\r\n \r\n}\r\n"],"mappings":";;AAKA,OAAM,MAAOA,WAAW;EAErBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IADvB,KAAAC,MAAM,GAAQ,yBAAyB;EAGxC;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,OAAOA,CAACC,IAAyB;IAC/B,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAU,cAAc,EAACC,OAAO,CAAC;EACxD;EACAC,QAAQA,CAAA;IACL,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAS,IAAI,CAACN,MAAM,GAAC,UAAU,CAAC;EACtD;EAAC,QAAAO,CAAA,G;qBA1BQV,WAAW,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXf,WAAW;IAAAgB,OAAA,EAAXhB,WAAW,CAAAiB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
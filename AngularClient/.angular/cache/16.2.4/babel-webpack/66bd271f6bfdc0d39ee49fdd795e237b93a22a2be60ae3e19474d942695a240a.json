{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport Swal from 'sweetalert2';\nexport let LoginComponent = class LoginComponent {\n  constructor(_userService, _lecturerService, router, activatedRoute) {\n    this._userService = _userService;\n    this._lecturerService = _lecturerService;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.users = [];\n    this.usersForm = new FormGroup({\n      name: new FormControl(''),\n      password: new FormControl(''),\n      course: new FormControl('')\n    });\n  }\n  ngOnInit() {\n    this._userService.getUsersFromServer().subscribe(data => {\n      this.users = data;\n      console.log(\"users:\", this.users);\n    });\n    this.activatedRoute.queryParams.subscribe(params => {\n      if (params) {\n        this.isLecturer = params['isLecturer'];\n      }\n    });\n    this._lecturerService.getLecturers().subscribe(data => {\n      this.lecturers = data;\n      console.log(\"lllll\" + this.lecturers + \"l\" + this.isLecturer);\n    });\n  }\n  checkUser() {\n    const name = this.usersForm.value.name;\n    const password = this.usersForm.value.password;\n    if (!this.isLecturer) {\n      // Check if the user exists in the array of all users\n      const user = this.users.find(user => user.name === name);\n      // Display alert based on whether the user exists or not\n      if (user) {\n        // If user exists, check if the password is correct\n        if (user.password === password) {\n          sessionStorage.setItem('userData', JSON.stringify(user));\n          sessionStorage.setItem('isLecturer', JSON.stringify(false));\n          Swal.fire('Hi ' + user.name, 'You Are Student!', 'info');\n          this.router.navigate(['/allCourses']);\n        } else {\n          Swal.fire('Error', 'Wrong Password', 'error');\n        }\n      } else {\n        // If user does not exist, navigate to the register component\n        this.router.navigate(['/register'], {\n          queryParams: {\n            userName: name\n          }\n        });\n      }\n    } else {\n      const lecturer = this.lecturers?.find(lecturer => lecturer.name === name);\n      if (lecturer) {\n        // If user exists, check if the password is correct\n        if (lecturer.password == password) {\n          sessionStorage.setItem('userData', JSON.stringify(lecturer));\n          sessionStorage.setItem('isLecturer', JSON.stringify(true));\n          Swal.fire('Hi ' + lecturer.name, 'You Are Lecturer!', 'info');\n          this.router.navigate(['/allCourses']);\n        } else {\n          Swal.fire('Error', 'Wrong Password', 'error');\n        }\n      } else {\n        // If user does not exist, navigate to the register component\n        Swal.fire('Error', 'You Dont Exit In The Lecturer Database', 'error');\n        this.router.navigate(['/login']);\n      }\n    }\n  }\n  lecturer() {\n    this.router.navigate(['/login'], {\n      queryParams: {\n        isLecturer: true\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);","map":{"version":3,"names":["Component","FormGroup","FormControl","Swal","LoginComponent","constructor","_userService","_lecturerService","router","activatedRoute","users","usersForm","name","password","course","ngOnInit","getUsersFromServer","subscribe","data","console","log","queryParams","params","isLecturer","getLecturers","lecturers","checkUser","value","user","find","sessionStorage","setItem","JSON","stringify","fire","navigate","userName","lecturer","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\מיכל גבאי\\תכנות\\אנגולר\\firstProject\\src\\app\\modules\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { User } from '../users/user.model';\nimport { UserService } from '../users/user.service';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { Course } from '../Courses/course.model';\nimport { LecturerService } from '../lecturers/lecturer.service';\nimport { Lecturer } from '../lecturers/lecturer.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  users: User[] = [];\n  usersForm: FormGroup;\n  isLecturer?: boolean;\n  lecturers?:Lecturer[];\n  constructor(private _userService: UserService,private _lecturerService:LecturerService, private router: Router, private activatedRoute: ActivatedRoute) {\n    this.usersForm = new FormGroup({\n      name: new FormControl(''),\n      password: new FormControl(''),\n      course: new FormControl('')\n    });\n  }\n  ngOnInit(): void {\n    this._userService.getUsersFromServer().subscribe(data => {\n      this.users = data;\n      console.log(\"users:\", this.users);\n    });\n    this.activatedRoute.queryParams.subscribe(params => {\n      if (params) {\n        this.isLecturer = params['isLecturer'];\n      }\n    });\n    this._lecturerService.getLecturers().subscribe(data => {\n      this.lecturers = data;\n      console.log(\"lllll\"+this.lecturers+\"l\"+this.isLecturer)\n    });\n  }\n\n  checkUser() {\n    const name = this.usersForm.value.name;\n    const password = this.usersForm.value.password;\n    if (!this.isLecturer) {\n      // Check if the user exists in the array of all users\n      const user = this.users.find(user => user.name === name);\n\n      // Display alert based on whether the user exists or not\n      if (user) {\n        // If user exists, check if the password is correct\n        if (user.password === password) {\n          sessionStorage.setItem('userData', JSON.stringify(user));\n          sessionStorage.setItem('isLecturer', JSON.stringify(false));\n          Swal.fire('Hi '+user.name, 'You Are Student!', 'info');\n          this.router.navigate(['/allCourses']);\n        } else {\n          Swal.fire('Error', 'Wrong Password', 'error');\n        }\n      } else {\n        // If user does not exist, navigate to the register component\n        this.router.navigate(['/register'], { queryParams: { userName: name } });\n      }\n    }\n    else{\n      const lecturer = this.lecturers?.find(lecturer => lecturer.name === name);\n      if (lecturer) {\n        // If user exists, check if the password is correct\n        if (lecturer.password == password) {\n          sessionStorage.setItem('userData', JSON.stringify(lecturer));\n          sessionStorage.setItem('isLecturer', JSON.stringify(true));\n          Swal.fire('Hi '+lecturer.name, 'You Are Lecturer!', 'info');\n          this.router.navigate(['/allCourses']);\n        } else {\n          Swal.fire('Error', 'Wrong Password', 'error');\n        }\n      }\n       else {\n        // If user does not exist, navigate to the register component\n        Swal.fire('Error', 'You Dont Exit In The Lecturer Database', 'error');\n        this.router.navigate(['/login']);\n      }\n    }\n  }\n  lecturer() {\n    this.router.navigate(['/login'], { queryParams: { isLecturer: true } });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport Swal from 'sweetalert2';\nexport let LoginComponent = class LoginComponent {\n  constructor(_userService, router, activatedRoute) {\n    this._userService = _userService;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.users = [];\n    this.usersForm = new FormGroup({\n      name: new FormControl(''),\n      password: new FormControl(''),\n      course: new FormControl('')\n    });\n  }\n  ngOnInit() {\n    this._userService.getUsersFromServer().subscribe(data => {\n      this.users = data;\n      console.log(\"users:\", this.users);\n    });\n    this.activatedRoute.queryParams.subscribe(params => {\n      if (params) {\n        this.isLecturer = params['isLecturer'];\n      }\n    });\n  }\n  checkUser() {\n    const name = this.usersForm.value.name;\n    const password = this.usersForm.value.password;\n    // Check if the user exists in the array of all users\n    const user = this.users.find(user => user.name === name);\n    // Display alert based on whether the user exists or not\n    if (user) {\n      // If user exists, check if the password is correct\n      if (user.password === password) {\n        sessionStorage.setItem('userData', JSON.stringify(user));\n        this.router.navigate(['/allCourses']);\n      } else {\n        Swal.fire('Error', 'Wrong Password', 'error');\n      }\n    } else {\n      // If user does not exist, navigate to the register component\n      this.router.navigate(['/register'], {\n        queryParams: {\n          userName: name\n        }\n      });\n    }\n  }\n  lecturer() {\n    this.router.navigate(['/login'], {\n      queryParams: {\n        isLecturer: true\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);","map":{"version":3,"names":["Component","FormGroup","FormControl","Swal","LoginComponent","constructor","_userService","router","activatedRoute","users","usersForm","name","password","course","ngOnInit","getUsersFromServer","subscribe","data","console","log","queryParams","params","isLecturer","checkUser","value","user","find","sessionStorage","setItem","JSON","stringify","navigate","fire","userName","lecturer","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\מיכל גבאי\\תכנות\\אנגולר\\firstProject\\src\\app\\modules\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { User } from '../users/user.model';\nimport { UserService } from '../users/user.service';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { Course } from '../Courses/course.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  users: User[] = [];\n  usersForm: FormGroup;\n  isLecturer?:boolean;\n  constructor(private _userService: UserService, private router: Router,private activatedRoute: ActivatedRoute) {\n    this.usersForm = new FormGroup({\n      name: new FormControl(''),\n      password: new FormControl(''),\n      course: new FormControl('')\n    });\n  }\n  ngOnInit(): void {\n    this._userService.getUsersFromServer().subscribe(data => {\n      this.users = data;\n      console.log(\"users:\", this.users);\n    });\n   this.activatedRoute.queryParams.subscribe(params => {\n      if (params) {\n        this.isLecturer=params['isLecturer'];}\n  });\n  }\n\n  checkUser() {\n    const name = this.usersForm.value.name;\n    const password = this.usersForm.value.password;\n\n    // Check if the user exists in the array of all users\n    const user = this.users.find(user => user.name === name);\n\n    // Display alert based on whether the user exists or not\n    if (user) {\n      // If user exists, check if the password is correct\n      if (user.password === password) {\n        sessionStorage.setItem('userData', JSON.stringify(user));\n        this.router.navigate(['/allCourses']);\n      } else {\n        Swal.fire('Error', 'Wrong Password', 'error');\n      }\n    } else {\n      // If user does not exist, navigate to the register component\n      this.router.navigate(['/register'], { queryParams: { userName: name } });\n    }\n  }\n  lecturer(){\n    this.router.navigate(['/login'], { queryParams: { isLecturer: true } });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAASC,SAAS,EAAEC,WAAW,QAAQ,gBAAgB;AAEvD,OAAOC,IAAI,MAAM,aAAa;AAQvB,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YAAoBC,YAAyB,EAAUC,MAAc,EAASC,cAA8B;IAAxF,KAAAF,YAAY,GAAZA,YAAY;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAAiB,KAAAC,cAAc,GAAdA,cAAc;IAH5F,KAAAC,KAAK,GAAW,EAAE;IAIhB,IAAI,CAACC,SAAS,GAAG,IAAIT,SAAS,CAAC;MAC7BU,IAAI,EAAE,IAAIT,WAAW,CAAC,EAAE,CAAC;MACzBU,QAAQ,EAAE,IAAIV,WAAW,CAAC,EAAE,CAAC;MAC7BW,MAAM,EAAE,IAAIX,WAAW,CAAC,EAAE;KAC3B,CAAC;EACJ;EACAY,QAAQA,CAAA;IACN,IAAI,CAACR,YAAY,CAACS,kBAAkB,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MACtD,IAAI,CAACR,KAAK,GAAGQ,IAAI;MACjBC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAACV,KAAK,CAAC;IACnC,CAAC,CAAC;IACH,IAAI,CAACD,cAAc,CAACY,WAAW,CAACJ,SAAS,CAACK,MAAM,IAAG;MAChD,IAAIA,MAAM,EAAE;QACV,IAAI,CAACC,UAAU,GAACD,MAAM,CAAC,YAAY,CAAC;;IAC1C,CAAC,CAAC;EACF;EAEAE,SAASA,CAAA;IACP,MAAMZ,IAAI,GAAG,IAAI,CAACD,SAAS,CAACc,KAAK,CAACb,IAAI;IACtC,MAAMC,QAAQ,GAAG,IAAI,CAACF,SAAS,CAACc,KAAK,CAACZ,QAAQ;IAE9C;IACA,MAAMa,IAAI,GAAG,IAAI,CAAChB,KAAK,CAACiB,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACd,IAAI,KAAKA,IAAI,CAAC;IAExD;IACA,IAAIc,IAAI,EAAE;MACR;MACA,IAAIA,IAAI,CAACb,QAAQ,KAAKA,QAAQ,EAAE;QAC9Be,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,CAAC;QACxD,IAAI,CAAClB,MAAM,CAACwB,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;OACtC,MAAM;QACL5B,IAAI,CAAC6B,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,OAAO,CAAC;;KAEhD,MAAM;MACL;MACA,IAAI,CAACzB,MAAM,CAACwB,QAAQ,CAAC,CAAC,WAAW,CAAC,EAAE;QAAEX,WAAW,EAAE;UAAEa,QAAQ,EAAEtB;QAAI;MAAE,CAAE,CAAC;;EAE5E;EACAuB,QAAQA,CAAA;IACN,IAAI,CAAC3B,MAAM,CAACwB,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEX,WAAW,EAAE;QAAEE,UAAU,EAAE;MAAI;IAAE,CAAE,CAAC;EACzE;CACD;AA9CYlB,cAAc,GAAA+B,UAAA,EAL1BnC,SAAS,CAAC;EACToC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWlC,cAAc,CA8C1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { FormGroup, FormControl } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../users/user.service\";\nimport * as i2 from \"../lecturers/lecturer.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction LoginComponent_label_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 10);\n    i0.ɵɵtext(1, \"Course:\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_input_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 11);\n  }\n}\nfunction LoginComponent_button_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function LoginComponent_button_15_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.lecturer());\n    });\n    i0.ɵɵtext(1, \"Login Lecturer\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(_userService, _lecturerService, router, activatedRoute) {\n    this._userService = _userService;\n    this._lecturerService = _lecturerService;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.users = [];\n    this.usersForm = new FormGroup({\n      name: new FormControl(''),\n      password: new FormControl(''),\n      course: new FormControl('')\n    });\n  }\n  ngOnInit() {\n    this._userService.getUsersFromServer().subscribe(data => {\n      this.users = data;\n      console.log(\"users:\", this.users);\n    });\n    this.activatedRoute.queryParams.subscribe(params => {\n      if (params) {\n        this.isLecturer = params['isLecturer'];\n      }\n    });\n    this._lecturerService.getLecturers().subscribe(data => {\n      this.lecturers = data;\n    });\n  }\n  checkUser() {\n    const name = this.usersForm.value.name;\n    const password = this.usersForm.value.password;\n    if (!this.isLecturer) {\n      // Check if the user exists in the array of all users\n      const user = this.users.find(user => user.name === name);\n      // Display alert based on whether the user exists or not\n      if (user) {\n        // If user exists, check if the password is correct\n        if (user.password === password) {\n          sessionStorage.setItem('userData', JSON.stringify(user));\n          this.router.navigate(['/allCourses']);\n        } else {\n          Swal.fire('Error', 'Wrong Password', 'error');\n        }\n      } else {\n        // If user does not exist, navigate to the register component\n        this.router.navigate(['/register'], {\n          queryParams: {\n            userName: name\n          }\n        });\n      }\n    } else {\n      const lecturer = this.lecturers?.find(lecturer => lecturer.name === name);\n      if (lecturer) {\n        // If user exists, check if the password is correct\n        if (lecturer.password === password) {\n          sessionStorage.setItem('userData', JSON.stringify(lecturer));\n          this.router.navigate(['/allCourses']);\n        } else {\n          Swal.fire('Error', 'Wrong Password', 'error');\n        }\n      } else {\n        // If user does not exist, navigate to the register component\n        Swal.fire('Error', 'You Dont Exit In The Lecturer Database', 'error');\n        this.router.navigate(['/login'], {\n          queryParams: {\n            userName: name\n          }\n        });\n      }\n    }\n  }\n  lecturer() {\n    this.router.navigate(['/login'], {\n      queryParams: {\n        isLecturer: true\n      }\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.LecturerService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 16,\n    vars: 4,\n    consts: [[3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"usr\"], [\"type\", \"text\", \"id\", \"usr\", \"formControlName\", \"name\", 1, \"form-control\"], [\"for\", \"pwd\"], [\"type\", \"password\", \"id\", \"pwd\", \"formControlName\", \"password\", 1, \"form-control\"], [\"for\", \"course\", 4, \"ngIf\"], [\"type\", \"text\", \"class\", \"form-control\", \"id\", \"course\", \"formControlName\", \"course\", 4, \"ngIf\"], [1, \"btn\", \"btn-success\", 3, \"click\"], [\"class\", \"btn btn-success\", 3, \"click\", 4, \"ngIf\"], [\"for\", \"course\"], [\"type\", \"text\", \"id\", \"course\", \"formControlName\", \"course\", 1, \"form-control\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"label\", 2);\n        i0.ɵɵtext(3, \"Name:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 1)(6, \"label\", 4);\n        i0.ɵɵtext(7, \"Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 1);\n        i0.ɵɵtemplate(10, LoginComponent_label_10_Template, 2, 0, \"label\", 6);\n        i0.ɵɵtemplate(11, LoginComponent_input_11_Template, 1, 0, \"input\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_12_listener() {\n          return ctx.checkUser();\n        });\n        i0.ɵɵtext(13, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"br\");\n        i0.ɵɵtemplate(15, LoginComponent_button_15_Template, 2, 0, \"button\", 9);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.usersForm);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLecturer);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLecturer);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLecturer);\n      }\n    },\n    dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormGroup","FormControl","Swal","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","LoginComponent_button_15_Template_button_click_0_listener","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","lecturer","LoginComponent","constructor","_userService","_lecturerService","router","activatedRoute","users","usersForm","name","password","course","ngOnInit","getUsersFromServer","subscribe","data","console","log","queryParams","params","isLecturer","getLecturers","lecturers","checkUser","value","user","find","sessionStorage","setItem","JSON","stringify","navigate","fire","userName","_","ɵɵdirectiveInject","i1","UserService","i2","LecturerService","i3","Router","ActivatedRoute","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵtemplate","LoginComponent_label_10_Template","LoginComponent_input_11_Template","LoginComponent_Template_button_click_12_listener","LoginComponent_button_15_Template","ɵɵproperty","ɵɵadvance"],"sources":["E:\\מיכל גבאי\\תכנות\\אנגולר\\firstProject\\src\\app\\modules\\login\\login.component.ts","E:\\מיכל גבאי\\תכנות\\אנגולר\\firstProject\\src\\app\\modules\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { User } from '../users/user.model';\nimport { UserService } from '../users/user.service';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { Course } from '../Courses/course.model';\nimport { LecturerService } from '../lecturers/lecturer.service';\nimport { Lecturer } from '../lecturers/lecturer.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  users: User[] = [];\n  usersForm: FormGroup;\n  isLecturer?: boolean;\n  lecturers?:Lecturer[];\n  constructor(private _userService: UserService,private _lecturerService:LecturerService, private router: Router, private activatedRoute: ActivatedRoute) {\n    this.usersForm = new FormGroup({\n      name: new FormControl(''),\n      password: new FormControl(''),\n      course: new FormControl('')\n    });\n  }\n  ngOnInit(): void {\n    this._userService.getUsersFromServer().subscribe(data => {\n      this.users = data;\n      console.log(\"users:\", this.users);\n    });\n    this.activatedRoute.queryParams.subscribe(params => {\n      if (params) {\n        this.isLecturer = params['isLecturer'];\n      }\n    });\n    this._lecturerService.getLecturers().subscribe(data => {\n      this.lecturers = data;\n    });\n  }\n\n  checkUser() {\n    const name = this.usersForm.value.name;\n    const password = this.usersForm.value.password;\n    if (!this.isLecturer) {\n      // Check if the user exists in the array of all users\n      const user = this.users.find(user => user.name === name);\n\n      // Display alert based on whether the user exists or not\n      if (user) {\n        // If user exists, check if the password is correct\n        if (user.password === password) {\n          sessionStorage.setItem('userData', JSON.stringify(user));\n          this.router.navigate(['/allCourses']);\n        } else {\n          Swal.fire('Error', 'Wrong Password', 'error');\n        }\n      } else {\n        // If user does not exist, navigate to the register component\n        this.router.navigate(['/register'], { queryParams: { userName: name } });\n      }\n    }\n    else{\n      const lecturer = this.lecturers?.find(lecturer => lecturer.name === name);\n      if (lecturer) {\n        // If user exists, check if the password is correct\n        if (lecturer.password === password) {\n          sessionStorage.setItem('userData', JSON.stringify(lecturer));\n          this.router.navigate(['/allCourses']);\n        } else {\n          Swal.fire('Error', 'Wrong Password', 'error');\n        }\n      }\n       else {\n        // If user does not exist, navigate to the register component\n        Swal.fire('Error', 'You Dont Exit In The Lecturer Database', 'error');\n        this.router.navigate(['/login'], { queryParams: { userName: name } });\n      }\n    }\n  }\n  lecturer() {\n    this.router.navigate(['/login'], { queryParams: { isLecturer: true } });\n  }\n}\n","<form [formGroup]=\"usersForm\">\n    <div class=\"form-group\">\n        <label for=\"usr\">Name:</label>\n        <input type=\"text\" class=\"form-control\" id=\"usr\" formControlName=\"name\">\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"pwd\">Password:</label>\n        <input type=\"password\" class=\"form-control\" id=\"pwd\" formControlName=\"password\">\n    </div>\n    <div class=\"form-group\">\n        <label *ngIf=\"isLecturer\"  for=\"course\">Course:</label>\n        <input type=\"text\"  *ngIf=\"isLecturer\" class=\"form-control\" id=\"course\" formControlName=\"course\">\n    </div>\n</form>\n<button class=\"btn btn-success\" (click)=\"checkUser()\">Login</button>\n<br/>\n<button class=\"btn btn-success\" *ngIf=\"!isLecturer\" (click)=\"lecturer()\">Login Lecturer</button>\n\n<!-- <ul class=\"list-group\">\n    <li class=\"list-group-item\" *ngFor=\"let u of users\">\n        <div class=\"row\">\n            <div class=\"col-2\">{{u.id}}</div>\n            <div class=\"col-2\">{{u.name}}</div>\n        </div>\n    </li>\n</ul> -->"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}